package com.think.leetcode.editor.cn;

//‰Ω†ÂèØ‰ª•ÈÄâÊã©‰ΩøÁî®ÂçïÈìæË°®ÊàñËÄÖÂèåÈìæË°®ÔºåËÆæËÆ°Âπ∂ÂÆûÁé∞Ëá™Â∑±ÁöÑÈìæË°®„ÄÇ 
//
// ÂçïÈìæË°®‰∏≠ÁöÑËäÇÁÇπÂ∫îËØ•ÂÖ∑Â§á‰∏§‰∏™Â±ûÊÄßÔºöval Âíå next „ÄÇval ÊòØÂΩìÂâçËäÇÁÇπÁöÑÂÄºÔºånext ÊòØÊåáÂêë‰∏ã‰∏Ä‰∏™ËäÇÁÇπÁöÑÊåáÈíà/ÂºïÁî®„ÄÇ 
//
// Â¶ÇÊûúÊòØÂèåÂêëÈìæË°®ÔºåÂàôËøòÈúÄË¶ÅÂ±ûÊÄß prev ‰ª•ÊåáÁ§∫ÈìæË°®‰∏≠ÁöÑ‰∏ä‰∏Ä‰∏™ËäÇÁÇπ„ÄÇÂÅáËÆæÈìæË°®‰∏≠ÁöÑÊâÄÊúâËäÇÁÇπ‰∏ãÊ†á‰ªé 0 ÂºÄÂßã„ÄÇ 
//
// ÂÆûÁé∞ MyLinkedList Á±ªÔºö 
//
// 
// MyLinkedList() ÂàùÂßãÂåñ MyLinkedList ÂØπË±°„ÄÇ 
// int get(int index) Ëé∑ÂèñÈìæË°®‰∏≠‰∏ãÊ†á‰∏∫ index ÁöÑËäÇÁÇπÁöÑÂÄº„ÄÇÂ¶ÇÊûú‰∏ãÊ†áÊó†ÊïàÔºåÂàôËøîÂõû -1 „ÄÇ 
// void addAtHead(int val) Â∞Ü‰∏Ä‰∏™ÂÄº‰∏∫ val ÁöÑËäÇÁÇπÊèíÂÖ•Âà∞ÈìæË°®‰∏≠Á¨¨‰∏Ä‰∏™ÂÖÉÁ¥†‰πãÂâç„ÄÇÂú®ÊèíÂÖ•ÂÆåÊàêÂêéÔºåÊñ∞ËäÇÁÇπ‰ºöÊàê‰∏∫ÈìæË°®ÁöÑÁ¨¨‰∏Ä‰∏™ËäÇÁÇπ„ÄÇ 
// void addAtTail(int val) Â∞Ü‰∏Ä‰∏™ÂÄº‰∏∫ val ÁöÑËäÇÁÇπËøΩÂä†Âà∞ÈìæË°®‰∏≠‰Ωú‰∏∫ÈìæË°®ÁöÑÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥†„ÄÇ 
// void addAtIndex(int index, int val) Â∞Ü‰∏Ä‰∏™ÂÄº‰∏∫ val ÁöÑËäÇÁÇπÊèíÂÖ•Âà∞ÈìæË°®‰∏≠‰∏ãÊ†á‰∏∫ index ÁöÑËäÇÁÇπ‰πãÂâç„ÄÇÂ¶ÇÊûú 
//index Á≠â‰∫éÈìæË°®ÁöÑÈïøÂ∫¶ÔºåÈÇ£‰πàËØ•ËäÇÁÇπ‰ºöË¢´ËøΩÂä†Âà∞ÈìæË°®ÁöÑÊú´Â∞æ„ÄÇÂ¶ÇÊûú index ÊØîÈïøÂ∫¶Êõ¥Â§ßÔºåËØ•ËäÇÁÇπÂ∞Ü ‰∏ç‰ºöÊèíÂÖ• Âà∞ÈìæË°®‰∏≠„ÄÇ 
// void deleteAtIndex(int index) Â¶ÇÊûú‰∏ãÊ†áÊúâÊïàÔºåÂàôÂà†Èô§ÈìæË°®‰∏≠‰∏ãÊ†á‰∏∫ index ÁöÑËäÇÁÇπ„ÄÇ 
// 
//
// 
//
// Á§∫‰æãÔºö 
//
// 
//ËæìÂÖ•
//["MyLinkedList", "addAtHead", "addAtTail", "addAtIndex", "get", 
//"deleteAtIndex", "get"]
//[[], [1], [3], [1, 2], [1], [1], [1]]
//ËæìÂá∫
//[null, null, null, null, 2, null, 3]
//
//Ëß£Èáä
//MyLinkedList myLinkedList = new MyLinkedList();
//myLinkedList.addAtHead(1);
//myLinkedList.addAtTail(3);
//myLinkedList.addAtIndex(1, 2);    // ÈìæË°®Âèò‰∏∫ 1->2->3
//myLinkedList.get(1);              // ËøîÂõû 2
//myLinkedList.deleteAtIndex(1);    // Áé∞Âú®ÔºåÈìæË°®Âèò‰∏∫ 1->3
//myLinkedList.get(1);              // ËøîÂõû 3
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 0 <= index, val <= 1000 
// ËØ∑‰∏çË¶Å‰ΩøÁî®ÂÜÖÁΩÆÁöÑ LinkedList Â∫ì„ÄÇ 
// Ë∞ÉÁî® get„ÄÅaddAtHead„ÄÅaddAtTail„ÄÅaddAtIndex Âíå deleteAtIndex ÁöÑÊ¨°Êï∞‰∏çË∂ÖËøá 2000 „ÄÇ 
// 
//
// Related TopicsËÆæËÆ° | ÈìæË°® 
//
// üëç 992, üëé 0 
//
//
//
//


public class DesignLinkedList {
    public static void main(String[] args) {
        MyLinkedList linkedList = new DesignLinkedList().new MyLinkedList();
        linkedList.addAtHead(7);
        linkedList.addAtHead(2);
        linkedList.addAtHead(1);
        linkedList.addAtIndex(3, 0);
        linkedList.deleteAtIndex(2);
        linkedList.addAtHead(6);
        linkedList.addAtTail(4);
        linkedList.get(4);
        linkedList.addAtHead(4);
        linkedList.addAtIndex(5, 0);
        linkedList.addAtHead(6);

    }

    //leetcode submit region begin(Prohibit modification and deletion)
    class MyLinkedList {
        ListNode head;
        int size;

        public MyLinkedList() {
            head = new ListNode(-1);
            size = 0;
        }

        public int get(int index) {
            if(index > size - 1 || index < 0){
                return -1;
            }
            ListNode currentNode = head.next;
            while(index-- > 0 && currentNode != null){
                currentNode = currentNode.next;
            }
            return currentNode.val;
        }

        public void addAtHead(int val) {
            ListNode currentNode = head;
            ListNode next = currentNode.next;
            ListNode newNode = new ListNode(val);
            currentNode.next = newNode;
            newNode.next = next;
            size++;
        }

        public void addAtTail(int val) {
            ListNode currentNode = head;
            while(currentNode.next != null){
                currentNode = currentNode.next;
            }
            currentNode.next = new ListNode(val);
            size++;
        }

        public void addAtIndex(int index, int val) {
            // index == size ÂàôÁõ∏ÂΩì‰∫éÂ∞æÊèí
            // index < size Ê≠£Â∏∏ÊèíÂÖ•
            if(index > size){
                return;
            }

            ListNode currentNode = head;
            while(index-- > 0 && currentNode != null){
                currentNode = currentNode.next;
            }
            ListNode next = currentNode.next;
            ListNode newNode = new ListNode(val);
            currentNode.next = newNode;
            newNode.next = next;
            size++;
        }

        public void deleteAtIndex(int index) {
            if(index > size - 1){
                return;
            }
            ListNode currentNode = head;
            if (index == 0) {
                if (currentNode.next != null) {
                    currentNode.next = currentNode.next.next;
                }
                size--;
                return;
            }

            while(index-- > 0 && currentNode != null){
                currentNode = currentNode.next;
            }
            if (currentNode.next != null) {
                currentNode.next = currentNode.next.next;
            }
            size--;
        }
    }

    class ListNode {
        int val;
        ListNode next;

        public ListNode() {

        }

        public ListNode(int val) {
            this.val = val;
        }

        public ListNode(int val, ListNode next) {
            this.val = val;
            this.next = next;
        }
    }

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */
//leetcode submit region end(Prohibit modification and deletion)

}